services:
  rabbit-mq:
    image: rabbitmq:4.0-management
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 3s
      retries: 5

  api-orders:
    build:
      context: OrdersService
    depends_on:
      rabbit-mq:
        condition: service_healthy

  feedback-service:
    image : bumblez/labb2cleancode-feedback-service
    container_name: FeedbackService
    depends_on:
        - feedbacksql
    ports:
        - "5006:8080"
    environment:
      ConnectionStrings_DefaultConnection: "Server=feedbacksql;Database=MyDatabase;User Id=sa;Password=SuperSafePass123;TrustServerCertificate=True;"


  gateway:
    build:
      context: .
      dockerfile: ./Gateway/Dockerfile
    ports:
      - "5003:8080"
    depends_on:
      - feedback-service
      - inventory-service
      - api-orders

  inventory-sql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: inventory-sql
    environment:
      SA_PASSWORD: "SuperSafePass.123"
      ACCEPT_EULA: "Y"
    volumes:
      - inventory_data:/var/opt/mssql/data

  feedbacksql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: feedbacksql
    ports:
      - "1434:1433"
    environment:
      SA_PASSWORD: "SuperSafePass123"
      ACCEPT_EULA: "Y"
    volumes:
      - feedback_volume:/var/opt/mssql

  inventory-service:
    image: felixamark/inventory-service
    container_name: inventory-service
    depends_on:
      inventory-sql:
        condition: service_started
      rabbit-mq:
        condition: service_healthy
    environment:
      InventoryService_ConnectionString: "Server=inventory-sql;Database=InventoryDb;User Id=sa;Password=SuperSafePass.123;TrustServerCertificate=True;"
    ports:
      - "5001:8080"
    
  service-a:
    build:
      context: .
      dockerfile: ServiceA/Dockerfile
    depends_on:
      rabbit-mq:
        condition: service_healthy
    

volumes:
  inventory_data: {}
  feedback_volume: {}


